@page "/login"

@using Authentication;
@inject UserAccountService userAccountService;
@inject IJSRuntime js;
@inject AuthenticationStateProvider authStateProvider;
@inject NavigationManager navManager;

<PageTitle>Login</PageTitle>

@* <RadzenTemplateForm Data=@("SimpleLogin") Action="http://www.google.com"> *@
@*     <RadzenLogin AllowRegister="true" AllowResetPassword="true"  *@
@*         Login=@OnLogin Register=OnRegister ResetPassword=@OnResetPassword /> *@
@* </RadzenTemplateForm> *@
<RadzenTemplateForm Data=@("SimpleLogin")>
    <RadzenLogin AllowRegister="true" AllowResetPassword="true"
        Login=@OnLogin />
</RadzenTemplateForm>

@code {
    async void OnLogin(LoginArgs args)
    {
        Console.WriteLine($"Username: {args.Username} and password: {args.Password}");
        
        var userAccount = userAccountService.GetByUserName(args.Username);
        if (userAccount == null || userAccount.Password != args.Password)
        {
            await js.InvokeVoidAsync("alert", "Invalid user Name or Password");
            return;
        }

        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(new UserSession
        {
            UserName = userAccount.UserName,
            Role = userAccount.Role
        });
        navManager.NavigateTo("/", true);
    }
    
    // void OnRegister()
    // {
    //     Console.WriteLine($"{userName} -> Register");
    // }
    //
    // void OnResetPassword()
    // {
    //     Console.WriteLine($"{userName} -> ResetPassword for user: {password}");
    // }
}
