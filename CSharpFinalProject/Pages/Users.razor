@page "/Users"
@using CSharpFinalProject.Data
@inject NavigationManager NavigationManager
@inject DataQueryApiService DataQueryApiService
<h3>Users</h3>

<RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" class="mt-2 mb-4" Text="Add New User" Click="@InsertRow" Disabled="@(_userToInsert != null || _userToUpdate != null)" />
<RadzenDataGrid @ref="_grid" IsLoading="@_isLoading" Count="@_users.Count" Data="@_users" LoadData="@LoadData" Style="max-height: 50%"
                TItem="Data.User" GridLines="DataGridGridLines.Both" EditMode="DataGridEditMode.Single" RowUpdate="@OnUpdateRow" RowCreate="OnCreateRow">
    <Columns>
        <RadzenDataGridColumn TItem="Data.User" Property="Id" Title="ID" Frozen="true" Width="80px" TextAlign="TextAlign.Center"/>
        <RadzenDataGridColumn TItem="Data.User" Property="Username" Title="Username" Frozen="true" Width="160px">
            <EditTemplate Context="user">
                <RadzenTextBox @bind-Value="user.Username" Style="width: 100%"/>
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Data.User" Property="Email" Title="Email" Width="500px">
            <EditTemplate Context="user">
                <RadzenTextBox @bind-Value="user.Email" Style="width: 100%"/>
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Data.User" Context="user" TextAlign="TextAlign.Right" Width="156px">
            <Template Context="user">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(_ => EditRow(user))" @onclick:stopPropagation="true">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(_ => DeleteRow(user))" @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>
            <EditTemplate Context="user">
                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((_) => SaveRow(user))">
                </RadzenButton>
                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((_) => CancelEdit(user))">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(_ => DeleteRow(user))">
                </RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    private RadzenDataGrid<Data.User> _grid = null!;
    private List<Data.User> _users = new();
    private bool _isLoading;
    private Data.User? _userToUpdate;
    private Data.User? _userToInsert;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        _isLoading = true;
        _users = await DataQueryApiService.GetQueryDataListAsync<Data.User>(NavigationManager.BaseUri + "api/users", new DataQueryApiArgs()) ?? _users;
        _isLoading = false;
    }

    async Task LoadData(LoadDataArgs args)
    {
        _isLoading = true;

        var apiArgs = DataQueryApiArgsConversions.FromLoadDataArgs(args);

        _users = await DataQueryApiService.GetQueryDataListAsync<Data.User>(NavigationManager.BaseUri + "api/users", apiArgs) ?? _users;

        _isLoading = false;
    }

    async Task EditRow(Data.User user)
    {
        _userToUpdate = user;
        await _grid.EditRow(user);
    }

    async Task OnUpdateRow(Data.User user)
    {
        if (user == _userToInsert)
        {
            _userToInsert = null;
        }

        _userToUpdate = null;
        await DataQueryApiService.UpdateQueryDataItem(NavigationManager.BaseUri + $"api/users/{user.Id}", user);
    }

    async Task SaveRow(Data.User user)
    {
        _isLoading = true;
        await _grid.UpdateRow(user);
        _isLoading = false;
    }

    void CancelEdit(Data.User user)
    {
        _userToUpdate = null;
        _grid.CancelEditRow(user);
    }

    async Task DeleteRow(Data.User user)
    {
        _isLoading = true;
        if (user == _userToInsert)
        {
            _userToInsert = null;
        }

        if (user == _userToUpdate)
        {
            _userToUpdate = null;
        }

        if (_users.Contains(user))
        {
            await DataQueryApiService.DeleteQueryDataItem(NavigationManager.BaseUri + $"api/users/{user.Id}");
        }
        else
        {
            _grid.CancelEditRow(user);
        }
        
        await _grid.Reload();
        _isLoading = false;
    }

    async Task InsertRow()
    {
        _userToInsert = new Data.User();
        await _grid.InsertRow(_userToInsert);
    }

    async Task OnCreateRow(Data.User user)
    {
        await DataQueryApiService.CreateQueryDataItem(NavigationManager.BaseUri + "api/users/", user);
        _userToInsert = null;
        await _grid.Reload();
    }


}
